package otp;

import com.sun.net.httpserver.HttpServer;
import com.sun.net.httpserver.HttpHandler;
import com.sun.net.httpserver.HttpExchange;

import java.io.IOException;
import java.io.OutputStream;
import java.net.InetSocketAddress;
import java.util.List;

import otp.controller.AuthController;
import otp.dao.UserDAO;
import otp.model.User;
import otp.service.AuthService;

public class App {
    public static void main(String[] args) throws IOException {

        UserDAO userDAO = new UserDAO();
        userDAO.init(); // –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã users

        // –°–ø–∏—Å–æ–∫ –∑–∞—Ä–∞–Ω–µ–µ –∑–∞–¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–ª–æ–≥–∏–Ω, –ø–∞—Ä–æ–ª—å, —Ä–æ–ª—å)
        List<User> initialUsers = List.of(
                new User("admin", AuthService.hashPassword("admin123"), "ADMIN"),
                new User("user1", AuthService.hashPassword("user123"), "USER"),
                new User("user2", AuthService.hashPassword("pass456"), "USER")
        );

        // –í—Å—Ç–∞–≤–∫–∞ –≤ –ë–î, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—â—ë –Ω–µ—Ç
        for (User user : initialUsers) {
            if (userDAO.isEmpty(user.getLogin())) {
                userDAO.save(user);
                System.out.println("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: " + user.getLogin());
            } else {
                System.out.println("‚ÑπÔ∏è –£–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: " + user.getLogin());
            }
        }

        // –ó–∞–ø—É—Å–∫–∞–µ–º HTTP-—Å–µ—Ä–≤–µ—Ä –Ω–∞ –ø–æ—Ä—Ç—É 8081
        HttpServer server = HttpServer.create(new InetSocketAddress(8081), 0);

        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –º–∞—Ä—à—Ä—É—Ç /ping –∏ –µ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        server.createContext("/ping", new PingHandler());

        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        AuthController authController = new AuthController();
        authController.start(server);

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø—É–ª –ø–æ—Ç–æ–∫–æ–≤
        server.setExecutor(null);

        // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
        server.start();
        System.out.println("üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:8081");
    }

    // –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ /ping
    static class PingHandler implements HttpHandler {
        @Override
        public void handle(HttpExchange exchange) throws IOException {
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ –∑–∞–ø—Ä–æ—Å–∞ ‚Äî —Ç–æ–ª—å–∫–æ GET
            if (!"GET".equals(exchange.getRequestMethod())) {
                exchange.sendResponseHeaders(405, -1); // –ú–µ—Ç–æ–¥ –Ω–µ —Ä–∞–∑—Ä–µ—à—ë–Ω
                return;
            }

            System.out.println("üî• /ping –±—ã–ª –≤—ã–∑–≤–∞–Ω");

            // –û—Ç–≤–µ—Ç
            String response = "pong";
            byte[] responseBytes = response.getBytes("UTF-8");

            exchange.getResponseHeaders().add("Content-Type", "text/plain; charset=UTF-8");
            exchange.sendResponseHeaders(200, responseBytes.length);

            try (OutputStream os = exchange.getResponseBody()) {
                os.write(responseBytes);
            }
        }
    }
}
